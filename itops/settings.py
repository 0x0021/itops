"""
Django settings for itops project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
from ldap3 import Server, Connection, ALL, ASYNC, REUSABLE, RESTARTABLE, NONE

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from dbinfo.encrypt_decode import encrypt_and_decode
from dbinfo.models import  dbinfo
from dbinfo.views import getldap3configtion
from ops.thrcreatmysqltable import mysqlDatabase

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'vd_(s7zbe$jnx$czw)s2rvyi82u&yoc!+c&_7b=y)u&m56w3o('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = ('*')


AUTH_USER_MODEL = "apiusers.Profile"
# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'ops',
    'ADapi',
    'rest_framework',
    'rest_framework.authtoken',
    'itapi',
    'apiusers',
]

# # API_DOC_IGNORE_NAMESPACES = []              # 列表里的namespaces将不会生成文档
# API_DOC_TITLE = 'IT接口文档平台'                          # 文档的标题
# API_DOC_API_DOMAIN = 'https://'       # API域名
# # API_DOC_SKIN = 'skin-blue'                  # skin-blue skin-black skin-purple skin-yellow skin-red skin-green
#
#
#


REST_FRAMEWORK = {
    # API 都需要登陆
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'utils.permissions.AdapiPermissions'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
    ),
    'UNICODE_JSON': False,
}

import datetime
JWT_AUTH = {
    "JWT_EXPIRATION_DELTA": datetime.timedelta(days=0, hours=2, seconds=0),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}

# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]
DATA_UPLOAD_MAX_MEMORY_SIZE = 29621440


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'permission.views.LoginMiddleware',
]



#不需要验证登录的
Identity_Exception = ['/login/','/userlogin/','favicon.ico','/login/favicon.ico','/basite1/','/gootokenpng/','/verificationtok/','/logingotok/',
                      '/itapidocument/','/docs/', '/Api-token-auth/', '/ApiUserViewset/', '/ApiUserViewset/', '/Ldap3Search/', '/Ldap3SearchDN/',
                      '/Ldap3AddUser/', '/Ldap3AddGroup/', '/Ldap3AddComputer/', '/Ldap3AddContact/', '/Ldap3AddOU/',
                      '/Ldap3RenameObject/', '/Ldap3DnMoveToOu/','/Ldap3DeleteObject/', '/Ldap3inspectObject/', '/Ldap3SetAccount/', '/Ldap3ResetPassword/',
                      '/Ldap3SerchLock/', '/Ldap3UnlockUser/','/Ldap3CanObject/', '/Ldap3CheckObject/', '/Ldap3UncheckObject/',
                      '/Ldap3AddMembers/', '/Ldap3ReMembers/','/Ldap3SetAccountLevel1/','/Ldap3SetAccountLevel2/',
                        '/Ldap3DeleteUser/', '/Ldap3DeleteGroup/','/Ldap3DeleteContact/','/Ldap3DeleteComputer/','/Ldap3DeleteOU/',
                        '/Ldap3GetUser/',
                        '/EXEnableMailboxhigh/', '/EXEnableMailboxarchive/','/EXGetMailboxdatabase/','/EXNewMoveRequest/', '/EXGetDistributionGroup/',
                        '/EXDisableGroup/', '/EXEnableGroup/','/EXGetMailboxStatistics/','/EXGetExchangeServer/', '/EXgetADPermission/',
                        '/EXGetMailContact/', '/EXgetMailboxPermission/','/EXRemoveMailboxPermission/','/EXAddMailboxPermission/', '/EXAddADPermission/',
                        '/EXRemoveADPermission/', '/EXEnableMailContact/','/EXRemoveMoveRequest/','/EXNewMailContact/', '/EXSetMailContactvalue/',
                        '/EXSetCasMailbox/', '/EXSetMailboxEmailAddresses/','/EXSetMailbox/','/EXSetMailbox1/', '/EXSetMailbox2/',
                        '/EXSetDistributionGroup/','/EXGetCasMailboxhight/','/EXGetMailbox/',
                      ]
# Add for Vue.js
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "frontend/dist/static"),
    os.path.join(BASE_DIR, 'static'),
]

ROOT_URLCONF = 'itops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['frontend/dist',os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'itops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases


try:
    mysqlDatabases = mysqlDatabase()
    if mysqlDatabases:
        from dbinfo.Profile import readprofile
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': readprofile('mysql', 'database'),
                'USER': readprofile('mysql', 'username'),
                'PASSWORD': encrypt_and_decode().decrypted_text(readprofile('mysql', 'password')),
                'HOST': readprofile('mysql', 'host'),
                'PORT': readprofile('mysql', 'Port'),
            }
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            }
        }
except:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }



# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

try:
    ldap3configtion = getldap3configtion()
    if ldap3configtion:
        if int(ldap3configtion['use_ssl']) == 1:
            use_ssl = True
        else:
            use_ssl = False
        ldap3Server = Server(ldap3configtion['server'], get_info=ALL, use_ssl=use_ssl)
        password = encrypt_and_decode().decrypted_text(ldap3configtion['password'])
        ldap3RESTARTABLE = Connection(server=ldap3Server, user=ldap3configtion['user'], password=password, auto_bind=True, client_strategy=RESTARTABLE)
        ladp3search_base=ldap3configtion['search_base']
        ladp3search_server=ldap3configtion['server']
        ladp3search_domain=ldap3configtion['domain'].split('.')[0]
    else:
        ldap3RESTARTABLE='None'
        ladp3search_base='None'
        ladp3search_server='None'
        ladp3search_domain = 'None'
except Exception as e:
    ldap3RESTARTABLE = 'None'
    ladp3search_base = 'None'
    ladp3search_server = 'None'
    ladp3search_domain = 'None'

returnadminusernamevalue = 'adminportal'